--- 5.make_recursive.cc	2024-01-02 16:13:58.388589962 +0100
+++ 6.align_topological_order.cc	2024-01-02 16:07:16.780305206 +0100
@@ -1,18 +1,12 @@
 #include <cstddef>
+#include <memory> // we'll need this one to allocate arrays.
 #include <vector>
 
 class Solution {
   public:
-    // We notice that on each excluded_index, `left_product` is doing all of the
-    // multiplications of the last iteration, then doing just one more. We can
-    // define a recursive solution for it like this:
-    // left_product(0) := 1
-    // left_product(i) := left_product(i - 1) * nums[i - 1]
-    // In terms of dependencies:
-    // left_product(i) <- ("depends on") left_product(i - 1), nums(i - 1)
+    // left_product(0) <- [] (no dependencies)
+    // left_product(i) <- left_product(i - 1), nums(i - 1)
 
-    // Opcount: i multiplications. O(n)
-    // Space: One int (nums[i + 1) per reducing frame. O(n)
     int left_product(size_t excluded_index, std::vector<int> &nums) {
         if (excluded_index == 0)
             return 1;
@@ -20,51 +14,62 @@ class Solution {
                nums[excluded_index - 1];
     }
 
-    // `right_product` is also doing duplicate work by multiplying the same
-    // tail. We can re-define the current right_product as:
-    // right_product(n - 1) := 1
-    // right_product(i) := right_product(i + 1) * nums[i + 1]
-    // There is another definition we could use, which uses the last iteration
-    // instead of the next:
-    // right_product(0) := prod(nums[1:])
-    // right_product(i) := right_product(i - 1) / nums[i - 1]
-    // But this one uses division, which is forbidden in the problem. We'll keep
-    // the former.
-    // As for dependencies:
+    // right_product(n) <- [] (no dependencies)
     // right_product(i) <- right_product(i + 1), nums(i + 1)
 
-    // Note that by making these recursive, we're dropping performance (the
-    // constants that are removed from O notation) from the last one. Due to how
-    // I've implemented it, we also have dropped in efficiency in space, since
-    // now we're taking O(n) space too!. We still have the  efficiency in time
-    // (O notation).
-    // But now we know how we can relate one iteration to another
-    // iteration that could potentially be done before, which is what enables us
-    // to re-use already computed results.
-
-    // Opcount: n - i multiplications. O(n)
-    // Space: One int (nums[i + 1) per reducing frame. O(n)
     int right_product(size_t excluded_index, std::vector<int> &nums) {
-        if (excluded_index == nums.size() - 1)
+        if (excluded_index == nums.size())
             return 1;
         return right_product(excluded_index + 1, nums) *
                nums[excluded_index + 1];
     }
 
-    // Opcount: (i - 1) + (n - i) multiplications = n - 1. O(n)
-    // Space: n for left_product, n for right_product. Since each returns before
-    // the multiplication, we re-use the frames: n ints. O(n).
-    int helper(size_t excluded_index, std::vector<int> &nums) {
-        return left_product(excluded_index, nums) *
-               right_product(excluded_index, nums);
-    }
-
     // Opcount: n*(n - 1) multiplications. O(n^2)
-    // Space: We re-use `helper`'s frame each iteration: n ints + n results: 2n. O(n)
+    // Space: 
+    //  - n frames for left_product, then reuse n for right_product.
+    //  - n left products, n right products.
+    //  - n results:
+    //  Total: n + 2n + n = 4n. O(n)
     std::vector<int> productExceptSelf(std::vector<int> &nums) {
+
+        // Since the topological ordering of the operations for each product is
+        // different, we have to split our algorithm in two loops, so that we
+        // can have the last result for  both products.
+        //
+        // Here it means distributing the multiplication of left and right
+        // values. Since we have to keep all the left multiplications before we
+        // do the right multiplications, we need n variables to store those
+        // intermediate values.
+
+        // Note that since multiplication is commutative, it doesn't matter if
+        // we start by defining the left values or if we start by defining the
+        // right values. We have to choose the ordering here because we're
+        // single threaded, so we have to do one task first and then the other.
+
+        // To avoid ordering shenanigans by having to push in order, we'll
+        // pre-allocate both arrays so that we can set them with our running
+        // index.
+        auto left_products = std::make_unique<int[]>(nums.size());
+
+        // left: we want to process i - 1 before i
+        for (size_t i = 0; i < nums.size(); i++) {
+            left_products[i] = left_product(i, nums);
+        }
+
+        auto right_products = std::make_unique<int[]>(nums.size());
+
+        // right: we want to process i + 1 before i
+        for (size_t i = nums.size(); i > 0;) {
+            --i;
+            right_products[i] = right_product(i, nums);
+        }
+
         std::vector<int> result;
-        for (size_t i = 0; i < nums.size(); i++)
-            result.push_back(helper(i, nums));
+
+        for (size_t i = 0; i < nums.size(); ++i) {
+            result.push_back(left_products[i] * right_products[i]);
+        }
+
         return result;
     }
 };
