--- 6.align_topological_order.cc	2024-01-02 16:07:16.780305206 +0100
+++ 7.cache.cc	2024-01-02 16:13:35.412573674 +0100
@@ -4,56 +4,38 @@
 
 class Solution {
   public:
-    // left_product(0) <- [] (no dependencies)
-    // left_product(i) <- left_product(i - 1), nums(i - 1)
-
-    int left_product(size_t excluded_index, std::vector<int> &nums) {
+    // On these steps we've been taking, we've been making the algorithm worse
+    // each time, so that we could analyze and align it.
+    // Now that we're processing things in the correct order for caching,
+    // let's use those caches!
+
+    // Opcount: Since the "recurring" result is cached: O(1).
+    // Space: No recursion so no frames need to be saved: O(1).
+    int left_product(size_t excluded_index, std::vector<int> &nums,
+                     int const left_products[]) {
         if (excluded_index == 0)
             return 1;
-        return left_product(excluded_index - 1, nums) *
-               nums[excluded_index - 1];
+        return left_products[excluded_index - 1] * nums[excluded_index - 1];
     }
 
-    // right_product(n) <- [] (no dependencies)
-    // right_product(i) <- right_product(i + 1), nums(i + 1)
-
-    int right_product(size_t excluded_index, std::vector<int> &nums) {
-        if (excluded_index == nums.size())
+    // Opcount: Since the "recurring" result is cached: O(1).
+    // Space: No recursion so no frames need to be saved: O(1).
+    int right_product(size_t excluded_index, std::vector<int> &nums,
+                      int const right_products[]) {
+        if (excluded_index == nums.size() - 1)
             return 1;
-        return right_product(excluded_index + 1, nums) *
-               nums[excluded_index + 1];
+        return right_products[excluded_index + 1] * nums[excluded_index + 1];
     }
 
-    // Opcount: n*(n - 1) multiplications. O(n^2)
-    // Space: 
-    //  - n frames for left_product, then reuse n for right_product.
-    //  - n left products, n right products.
-    //  - n results:
-    //  Total: n + 2n + n = 4n. O(n)
+    // Opcount: n lefts + n rights + n left*rights = 3n. O(n).
+    // Space: n left products + n right products + n results = 3n. O(n).
     std::vector<int> productExceptSelf(std::vector<int> &nums) {
 
-        // Since the topological ordering of the operations for each product is
-        // different, we have to split our algorithm in two loops, so that we
-        // can have the last result for  both products.
-        //
-        // Here it means distributing the multiplication of left and right
-        // values. Since we have to keep all the left multiplications before we
-        // do the right multiplications, we need n variables to store those
-        // intermediate values.
-
-        // Note that since multiplication is commutative, it doesn't matter if
-        // we start by defining the left values or if we start by defining the
-        // right values. We have to choose the ordering here because we're
-        // single threaded, so we have to do one task first and then the other.
-
-        // To avoid ordering shenanigans by having to push in order, we'll
-        // pre-allocate both arrays so that we can set them with our running
-        // index.
         auto left_products = std::make_unique<int[]>(nums.size());
 
         // left: we want to process i - 1 before i
         for (size_t i = 0; i < nums.size(); i++) {
-            left_products[i] = left_product(i, nums);
+            left_products[i] = left_product(i, nums, left_products.get());
         }
 
         auto right_products = std::make_unique<int[]>(nums.size());
@@ -61,7 +43,7 @@ class Solution {
         // right: we want to process i + 1 before i
         for (size_t i = nums.size(); i > 0;) {
             --i;
-            right_products[i] = right_product(i, nums);
+            right_products[i] = right_product(i, nums, right_products.get());
         }
 
         std::vector<int> result;
