--- 7.cache.cc	2024-01-02 16:13:35.412573674 +0100
+++ 8.inline.cc	2024-01-02 16:16:55.469696418 +0100
@@ -4,28 +4,16 @@
 
 class Solution {
   public:
-    // On these steps we've been taking, we've been making the algorithm worse
-    // each time, so that we could analyze and align it.
-    // Now that we're processing things in the correct order for caching,
-    // let's use those caches!
-
-    // Opcount: Since the "recurring" result is cached: O(1).
-    // Space: No recursion so no frames need to be saved: O(1).
-    int left_product(size_t excluded_index, std::vector<int> &nums,
-                     int const left_products[]) {
-        if (excluded_index == 0)
-            return 1;
-        return left_products[excluded_index - 1] * nums[excluded_index - 1];
-    }
-
-    // Opcount: Since the "recurring" result is cached: O(1).
-    // Space: No recursion so no frames need to be saved: O(1).
-    int right_product(size_t excluded_index, std::vector<int> &nums,
-                      int const right_products[]) {
-        if (excluded_index == nums.size() - 1)
-            return 1;
-        return right_products[excluded_index + 1] * nums[excluded_index + 1];
-    }
+    // We've already reached the target efficiency: O(n).
+    // From here we'll be reducing & simplifying the code so that we get more
+    // performance, which means reducing the constants that come before the
+    // `n`s. Some of these can be automatically done by compilers, others
+    // require human intervention since they're about changing data structures,
+    // not just reordering code.
+
+    // Our first step will be inlining our helper functions to understand how
+    // our loops behave. This way we can understand better direct dependencies
+    // between variables.
 
     // Opcount: n lefts + n rights + n left*rights = 3n. O(n).
     // Space: n left products + n right products + n results = 3n. O(n).
@@ -35,7 +23,11 @@ class Solution {
 
         // left: we want to process i - 1 before i
         for (size_t i = 0; i < nums.size(); i++) {
-            left_products[i] = left_product(i, nums, left_products.get());
+            if (i == 0) {
+                left_products[i] = 1;
+            } else {
+                left_products[i] = left_products[i - 1] * nums[i - 1];
+            }
         }
 
         auto right_products = std::make_unique<int[]>(nums.size());
@@ -43,7 +35,11 @@ class Solution {
         // right: we want to process i + 1 before i
         for (size_t i = nums.size(); i > 0;) {
             --i;
-            right_products[i] = right_product(i, nums, right_products.get());
+            if (i == nums.size() - 1) {
+                right_products[i] = 1;
+            } else {
+                right_products[i] = right_products[i + 1] * nums[i + 1];
+            }
         }
 
         std::vector<int> result;
